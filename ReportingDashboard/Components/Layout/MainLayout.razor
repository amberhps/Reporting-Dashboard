@using System.DirectoryServices
@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="IsDarkMode" Theme="Theme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="4">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
        <MudText Typo="Typo.h6">Reporting Dashboard</MudText>
        <MudChip T="string" Color="Color.Secondary" Size="Size.Small" Class="ms-2">@_version</MudChip>
        <MudSpacer />
        @if (UserImage != null)
        {
            <MudAvatar>
                <MudImage Src="@($"data:image/svg;base64, {UserImage}")" />
            </MudAvatar>
        } 
        else 
        {
            <AuthorizeView>
                <MudAvatar>@context.User.Identity?.Name?.Split("\\")[1].ToUpper()[0]</MudAvatar>
            </AuthorizeView>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="IsDrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="4" Variant="DrawerVariant.Mini">
        <MudNavMenu Class="nav-menu">
            <MudNavGroup Title="Warehouse" Icon="@Icons.Material.Rounded.House" HideExpandIcon="@(!IsDrawerOpen)">
                <MudNavLink Href="/warehouse-dashboard" Icon="@Icons.Material.Rounded.DashboardCustomize" IconColor="Color.Primary">Dashboard</MudNavLink>
                <MudNavLink Href="/warehouse-configuration" Icon="@Icons.Material.Rounded.Construction" IconColor="Color.Primary">Configuration</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="Pharma API" Icon="@Icons.Material.Rounded.Api" HideExpandIcon="@(!IsDrawerOpen)">
                <MudNavLink Href="/pharma-api-dashboard" Icon="@Icons.Material.Rounded.DashboardCustomize" IconColor="Color.Primary">Dashboard</MudNavLink>
                <MudNavLink Href="/pharma-api-configuration" Icon="@Icons.Material.Rounded.Construction" IconColor="Color.Primary">Configuration</MudNavLink>
            </MudNavGroup>
            <MudNavLink Href="/jobs" Icon="@Icons.Material.Rounded.AccessTime">Jobs</MudNavLink>
            <MudNavLink Href="/sales/audited-sales" Icon="@Icons.Material.Rounded.AttachMoney">Audited Sales</MudNavLink>
            <MudNavLink Icon="@Icons.Material.Rounded.Settings" IconColor="Color.Primary" Class="bottom-align" OnClick="ShowSettingsDialog">Settings</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <CascadingValue Value="Palette">
            <div class="mx-2 my-1">
                @Body
            </div>
        </CascadingValue>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    [Inject]
    public required IDialogService Dialog { get; set; }

    [Inject]
    public required MudTheme Theme { get; set; }

    [CascadingParameter]
    public required Task<AuthenticationState> Auth { get; set; }

    public Palette Palette => IsDarkMode ? Theme.PaletteDark : Theme.PaletteLight;

    private bool IsDrawerOpen = true;
    private bool IsDarkMode = true;

    private string? _version = Assembly.GetEntryAssembly()
    ?.GetCustomAttributes<AssemblyInformationalVersionAttribute>()
    ?.Select(x => x.InformationalVersion).First()
    .Split("+")[0];

    private void ToggleDrawer() => IsDrawerOpen = !IsDrawerOpen;

    private string? UserImage;

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            var auth = await Auth;
            if (auth.User?.Identity?.IsAuthenticated ?? false) 
            {
                if (auth.User?.Identity?.Name == null)
                {
                    return;
                }

                using var dEntry = new DirectoryEntry("adsdatasource")
                {
                    Path = "LDAP://amberpharmacy.com",
                    AuthenticationType = AuthenticationTypes.Secure
                };

                using var dSearcher = new DirectorySearcher(dEntry) 
                { 
                    Filter = $"(&(objectClass=person)(sAMAccountName={auth.User.Identity.Name.Split("\\")[1]}))"
                };

                using var user = new DirectoryEntry(dSearcher.FindOne()?.Path);
                var image = user.Properties["thumbnailPhoto"].Value as byte[];

                if (image != null)
                {
                    UserImage = Convert.ToBase64String(image);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        await base.OnInitializedAsync();
    }

    private async Task ShowSettingsDialog() 
    {
        var settings = await Dialog.ShowAsync<SettingsModal>("Settings",
            new DialogParameters() 
            { 
                { "IsDarkMode", IsDarkMode }
            },
            new DialogOptions() 
            { 
                Position = DialogPosition.TopCenter,
                NoHeader = true
            }
        );

        var result = await settings.Result;

        if (result == null) 
        {
            return;
        }

        if (!result.Canceled && result.Data is bool darkMode)
        {
            IsDarkMode = darkMode;
        }
    }
}
