@page "/sales/audited-sales"

@using ReportingDashboard.Data.Sales
@using ReportingDashboard.Data.Sales.Models
@using Bogus
@using ReportingDashboard.Services

@if (SelectedFiscalMonth == null && !IsLoadingFiscalMonth)
{
    <MudStack Row Class="pt-3">
        <MudSpacer />
        <MudSelect T="FiscalMonth" ValueChanged="OnFiscalMonthChanged" Value="SelectedFiscalMonth" Disabled="IsLoadingFiscalMonth" Placeholder="Select Fiscal Month">
            @foreach (var month in Context.FiscalMonths)
            {
                <MudSelectItem T="FiscalMonth" Value="month">
                    <MudStack Row Spacing="1" Justify="Justify.SpaceBetween">
                        <MudText>@month.Name</MudText>
                        <MudIcon Icon="@(month.IsClosed? Icons.Material.Rounded.Lock : Icons.Material.Rounded.LockOpen)" Color="@(month.IsClosed? Color.Error: Color.Success)" Size="Size.Small" />
                    </MudStack>
                </MudSelectItem>
            }
        </MudSelect>
        <MudSpacer />
    </MudStack>
}
else
{
    <MudStack Row>
        <MudIconButton Icon="@Icons.Material.Rounded.ArrowBack" OnClick="OnBackClicked" />
        <MudIcon Icon="@(SelectedFiscalMonth!.IsClosed ? Icons.Material.Rounded.Lock : Icons.Material.Rounded.LockOpen)" Color="@(SelectedFiscalMonth!.IsClosed ? Color.Error : Color.Success)" Size="Size.Small" />
        <MudText Typo="Typo.h6">@(SelectedFiscalMonth?.Name)</MudText>
        <MudSpacer/>
        <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" ValueChanged="(s) => OnSearch(s)" Clearable Disabled="@IsLoadingFiscalMonth" />
        <MudSpacer/>
        <MudIcon Icon="@Icons.Material.Rounded.CalendarToday" Size="Size.Small" />
        <MudText Typo="Typo.subtitle1">@($"{SelectedFiscalMonth?.StartDate:MM/dd/yyyy} - {SelectedFiscalMonth?.EndDate:MM/dd/yyyy}")</MudText>
        <MudMenu Dense Icon="@Icons.Material.Rounded.MoreHoriz" Disabled="@IsLoadingFiscalMonth">
            <MudMenuItem Icon="@Icons.Material.Rounded.Download" OnClick="async () => await OnExportPeriodDataAsync()">Export Excel</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Rounded.Refresh" OnClick="() => OnFiscalMonthChanged(SelectedFiscalMonth)">Refresh Data</MudMenuItem>
            @if (!SelectedFiscalMonth.IsClosed)
            {
                <MudDivider Light />
                <MudMenuItem Icon="@Icons.Material.Rounded.Lock" IconColor="Color.Error" OnClick="() => OnLockPeriod()">Lock Period</MudMenuItem>
            }
        </MudMenu>
    </MudStack>

    if (IsLoadingFiscalMonth)
    {
        <MudProgressLinear Indeterminate Color="Color.Primary" />
    } 
    else
    {
        <MudDivider Class="mb-3"/>
        <MudTable T="SalesRecord" ServerData="LoadPaginatedFiscalSales" CanCancelEdit RowEditPreview="OnEdit" RowEditCancel="OnCancel" RowEditCommit="async (x) => await OnCommit(x)" @ref="Table" Dense ReadOnly="SelectedFiscalMonth!.IsClosed">
            <HeaderContent>
                <MudTh><MudTableSortLabel T="SalesRecord" SortLabel="BilledDate">Billed Date</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="SalesRecord" SortLabel="CarrierName">Carrier Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="SalesRecord" SortLabel="InventoryItemName">Inventory Item Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="SalesRecord" SortLabel="ExpectedPrice">Expected Price</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="SalesRecord" SortLabel="Cost">Cost</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="SalesRecord" SortLabel="AdjustmentAmount">Adjustment Amount</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="SalesRecord" SortLabel="GrossProfit">Gross Profit</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.BilledDate.ToString("MM/dd/yyyy")</MudTd>
                <MudTd>@context.CarrierName</MudTd>
                <MudTd>@context.InventoryItemName</MudTd>
                <MudTd><MudText Color="@(context.ExpectedPrice < 0 ? Color.Error : Color.Inherit)">@context.ExpectedPrice.ToString("C")</MudText></MudTd>
                <MudTd><MudText Color="@(context.Cost < 0 ? Color.Error : Color.Inherit)">@context.Cost.ToString("C")</MudText></MudTd>
                <MudTd><MudText Color="@(context.AdjustmentAmount < 0 ? Color.Error : Color.Inherit)">@context.AdjustmentAmount.ToString("C")</MudText></MudTd>
                <MudTd>
                    <MudStack Row>
                        <MudText Color="@(context.GrossProfit < 0 ? Color.Error : Color.Inherit)">@context.GrossProfit.ToString("C")</MudText>
                        <MudSpacer />
                        <MudIcon Icon="@(context.IsError? Icons.Material.Rounded.Warning : "")" Color="Color.Warning" Title="Expected - Cost + Adjustment != Gross Profit" />
                    </MudStack>
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd>@context.BilledDate.ToString("MM/dd/yyyy")</MudTd>
                <MudTd>@context.CarrierName</MudTd>
                <MudTd>@context.InventoryItemName</MudTd>
                <MudTd><MudNumericField @bind-Value=context.ExpectedPrice></MudNumericField></MudTd>
                <MudTd><MudNumericField @bind-Value=context.Cost></MudNumericField></MudTd>
                <MudTd><MudNumericField @bind-Value=context.AdjustmentAmount></MudNumericField></MudTd>
                <MudTd><MudNumericField @bind-Value=context.GrossProfit></MudNumericField></MudTd>
            </RowEditingTemplate>
            <FooterContent>
                <MudTd>Totals:</MudTd>
                <MudTd></MudTd>
                <MudTd></MudTd>
                <MudTd><MudText Color="@(TotalSales.ExpectedPrice < 0 ? Color.Error : Color.Inherit)">@TotalSales.ExpectedPrice.ToString("C")</MudText></MudTd>
                <MudTd><MudText Color="@(TotalSales.Cost < 0 ? Color.Error : Color.Inherit)">@TotalSales.Cost.ToString("C")</MudText></MudTd>
                <MudTd><MudText Color="@(TotalSales.AdjustmentAmount < 0 ? Color.Error : Color.Inherit)">@TotalSales.AdjustmentAmount.ToString("C")</MudText></MudTd>
                <MudTd><MudText Color="@(TotalSales.GrossProfit < 0 ? Color.Error : Color.Inherit)">@TotalSales.GrossProfit.ToString("C")</MudText></MudTd>
            </FooterContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <MudText>Add Total row here</MudText>
    }
}


@code 
{
    [Inject]
    public required SalesContext Context { get; set; }

    [Inject]
    public required AuthenticationStateProvider AuthStateProvider { get; set; }

    [Inject]
    public required IDialogService Dialog { get; set; }

    [Inject]
    public required IWebHostEnvironment Environment { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    [Inject]
    public required IJSRuntime JS { get; set; }

    private CancellationTokenSource TokenSource = new();
    private string CurrentUserName = string.Empty;

    private FiscalMonth? SelectedFiscalMonth;
    private bool IsLoadingFiscalMonth = false;

    private MudTable<SalesRecord> Table = null!;
    private TableState TableState = new();

    private SalesRecord TotalSales = new();
    private SalesRecord? EditingRecordBackup;
    private string SearchTerm = string.Empty;

    private Dictionary<string, Func<SalesRecord, object>> SortSelectors = new()
    {
        ["BilledDate"] = x => x.BilledDate,
        ["CarrierName"] = x => x.CarrierName,
        ["InventoryItemName"] = x => x.InventoryItemName,
        ["ExpectedPrice"] = x => x.ExpectedPrice,
        ["Cost"] = x => x.Cost,
        ["AdjustmentAmount"] = x => x.AdjustmentAmount,
        ["GrossProfit"] = x => x.GrossProfit
    };

    private readonly Random _random = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            CurrentUserName = user.Identity.Name?.Split("\\", 2)[1] ?? "Unknown User";
        }

        Context.FiscalMonths = await Context.GetFiscalMonthsAsync(TokenSource.Token);

        foreach (var month in Context.FiscalMonths)
        {
            if (_random.Next(1, 100) < 50)
            {
                month.IsClosed = true;
            }

        }
    }

    public async Task OnFiscalMonthChanged(FiscalMonth month)
    {
        IsLoadingFiscalMonth = true;
        SelectedFiscalMonth = month;

        try
        {
            await Task.Delay(5000, TokenSource.Token);
            Context.FiscalMonthSales = new Faker<SalesRecord>()
                .RuleFor(x => x.Id, f => f.IndexGlobal)
                .RuleFor(x => x.BilledDate, f => f.Date.Between(month.StartDate, month.EndDate))
                .RuleFor(x => x.CarrierName, f => f.Company.CompanyName())
                .RuleFor(x => x.InventoryItemName, f => f.Commerce.ProductName())
                .RuleFor(x => x.ExpectedPrice, f => f.Finance.Amount())
                .RuleFor(x => x.Cost, (f, x) => f.Finance.Amount(50, (decimal)x.ExpectedPrice))
                .RuleFor(x => x.AdjustmentAmount, f => f.Finance.Amount(-50, 50))
                .RuleFor(x => x.GrossProfit, (f, x) => x.ExpectedPrice - x.Cost + x.AdjustmentAmount)
                .Generate(_random.Next(1000, 2000));
        }
        catch (TaskCanceledException) { }
        finally
        {
            IsLoadingFiscalMonth = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task<TableData<SalesRecord>> LoadPaginatedFiscalSales(TableState state, CancellationToken token)
    {
        var cts = CancellationTokenSource.CreateLinkedTokenSource(token, TokenSource.Token);

        try
        {
            TableState = state;
            var data = BuildSalesEnumerable(state);
            TotalSales = new SalesRecord()
            {
                ExpectedPrice = data.Sum(x => x.ExpectedPrice),
                Cost = data.Sum(x => x.Cost),
                AdjustmentAmount = data.Sum(x => x.AdjustmentAmount),
                GrossProfit = data.Sum(x => x.GrossProfit)
            };

            var count = data.Count();

            data = data.Skip(state.Page * state.PageSize).Take(state.PageSize);

            return new TableData<SalesRecord>() { TotalItems = count, Items = data };
        } 
        catch
        {
            return new TableData<SalesRecord>() { TotalItems = 0, Items = [] };
        }
    }

    private IEnumerable<SalesRecord> BuildSalesEnumerable(TableState state)
    {
        var data = Context.FiscalMonthSales.AsEnumerable();

        if (!string.IsNullOrEmpty(SearchTerm))
        {
            data = data.Where(x =>
                x.CarrierName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                x.InventoryItemName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(state.SortLabel) && SortSelectors.TryGetValue(state.SortLabel, out var selector))
        {
            data = state.SortDirection == SortDirection.Ascending
                ? data.OrderBy(selector)
                : data.OrderByDescending(selector);
        }

        return data;
    }

    public async Task OnBackClicked()
    {
        TokenSource.Cancel();
        IsLoadingFiscalMonth = false;
        SelectedFiscalMonth = null;
        EditingRecordBackup = null;
        TokenSource = new();

        await InvokeAsync(StateHasChanged);
    }

    public void OnEdit(object record)
    {
        if (record is SalesRecord salesRecord)
        {
            EditingRecordBackup = new()
            {
                ExpectedPrice = salesRecord.ExpectedPrice,
                Cost = salesRecord.Cost,
                AdjustmentAmount = salesRecord.AdjustmentAmount,
                GrossProfit = salesRecord.GrossProfit,
                Id = salesRecord.Id,
                BilledDate = salesRecord.BilledDate,
                CarrierName = salesRecord.CarrierName,
                InventoryItemName = salesRecord.InventoryItemName
            };
        }
    }

    public async Task OnCommit(object record)
    {
        if (record is SalesRecord salesRecord && EditingRecordBackup != null)
        {
            var entityType = salesRecord.GetType();
            var entityName = entityType.Name;
            var entityId = salesRecord.Id;

            var auditLogs = new List<AuditLog>();
            var hasChanges = false;

            foreach (var prop in entityType.GetProperties())
            {
                var oldValue = prop.GetValue(EditingRecordBackup);
                var newValue = prop.GetValue(salesRecord);

                if (!oldValue?.Equals(newValue) ?? true)
                {
                    hasChanges = true;

                    auditLogs.Add(new AuditLog
                    {
                        Id = Context.AuditLogs.Count + 1,
                        EntityName = entityName,
                        EntityId = entityId,
                        PropertyName = prop.Name,
                        OldValue = oldValue?.ToString(),
                        NewValue = newValue?.ToString(),
                        ChangedBy = CurrentUserName,
                        ChangedAt = DateTime.UtcNow
                    });
                }
            }

            if (hasChanges)
            {
                TotalSales = new SalesRecord()
                {
                    ExpectedPrice = TotalSales.ExpectedPrice - EditingRecordBackup.ExpectedPrice + salesRecord.ExpectedPrice,
                    Cost = TotalSales.Cost - EditingRecordBackup.Cost + salesRecord.Cost,
                    AdjustmentAmount = TotalSales.AdjustmentAmount - EditingRecordBackup.AdjustmentAmount + salesRecord.AdjustmentAmount,
                    GrossProfit = TotalSales.GrossProfit - EditingRecordBackup.GrossProfit + salesRecord.GrossProfit
                };

                var dialog = await Dialog.ShowAsync<ChangeReasonModal>(
                    "Change Reason",
                    new DialogParameters() { { "Required", false } },
                    new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true }
                );

                var result = await dialog.Result;

                if (result != null && !result.Canceled)
                {
                    foreach (var auditLog in auditLogs)
                    {
                        auditLog.ChangeReason = result.Data?.ToString() ?? "";
                        Context.AuditLogs.Add(auditLog);
                    }
                }

                await Context.SaveChangesAsync();
                await InvokeAsync(StateHasChanged);
            }

            EditingRecordBackup = null;
        }
    }

    public void OnCancel(object record)
    {
        if (record is SalesRecord salesRecord && EditingRecordBackup != null)
        {
            salesRecord.ExpectedPrice = EditingRecordBackup.ExpectedPrice;
            salesRecord.Cost = EditingRecordBackup.Cost;
            salesRecord.AdjustmentAmount = EditingRecordBackup.AdjustmentAmount;
            salesRecord.GrossProfit = EditingRecordBackup.GrossProfit;
        }

        EditingRecordBackup = null;
    }

    public void OnSearch(string searchTerm)
    {
        SearchTerm = searchTerm;
        Table.ReloadServerData();
    }

    public void OnLockPeriod()
    {
        if (SelectedFiscalMonth != null)
        {
            SelectedFiscalMonth.IsClosed = true;
        }
    }

    public async Task OnExportPeriodDataAsync()
    {
        if (SelectedFiscalMonth == null)
            return;

        var baseUri = NavigationManager.BaseUri;
        var fileName = $"{Guid.NewGuid()}.xlsx";
        var filePath = Path.Combine(Environment.WebRootPath, "exports", fileName);
        var fileUrl = $"{baseUri}exports/{fileName}";

        ExcelExporter.ExportToExcel(BuildSalesEnumerable(TableState), filePath, SelectedFiscalMonth.Name, ["Id"]);

        await JS.InvokeVoidAsync("triggerFileDownload", $"AuditedSales_{SelectedFiscalMonth.StartDate:yyyyMMdd}-{SelectedFiscalMonth.EndDate:yyyyMMdd}.xlsx", fileUrl);

        _ = Task.Run(async () =>
        {
            await Task.Delay(60000);
            if (File.Exists(filePath))
                File.Delete(filePath);
        });
    }
}
