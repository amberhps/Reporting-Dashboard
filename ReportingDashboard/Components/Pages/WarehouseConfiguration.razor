@page "/warehouse-configuration"

<MudExpansionPanels>
    <MudExpansionPanel Text="Service Area Designations" ExpandedChanged="OnServiceAreaOpened">
        <MudTable Items="ServiceAreaDesignations"
        Loading="@IsServiceAreaDesignationsLoading"
        Dense
        Filter="FilterServiceArea"
        Hover
        EditTrigger="TableEditTrigger.RowClick"
        ApplyButtonPosition="TableApplyButtonPosition.End"
        CanCancelEdit
        OnPreviewEditClick="() => IsServiceAreaEditing = true"
        RowEditCancel="CancelServiceAreaChanges"
        OnCommitEditClick="CommitChanges"
        @ref="ServiceAreaTable">
            <ColGroup>
                <col />
                <col />
                <col />
                <col />
                <col style="width: 50px;" />
            </ColGroup>
            <ToolBarContent>
                <MudTextField @bind-Value="ServiceAreaSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddServiceArea" Disabled="IsServiceAreaEditing">Add</MudIconButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Service Area</MudTh>
                <MudTh>Sales Designation</MudTh>
                <MudTh>Effective Start Date</MudTh>
                <MudTh>Effective End Date</MudTh>
                <MudTh />
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.ServiceArea</MudTd>
                <MudTd>@context.SalesDesignation</MudTd>
                <MudTd>@context.EffectiveStartDate?.ToString("MM/dd/yyyy")</MudTd>
                <MudTd>@context.EffectiveEndDate?.ToString("MM/dd/yyyy")</MudTd>
                <MudTd Style="text-align:center">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => DeleteServiceArea(context)" />
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd>
                    <MudTextField @bind-Value="context.ServiceArea" Required />
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="context.SalesDesignation" Required />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="context.EffectiveStartDate" Required />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="context.EffectiveEndDate" Required />
                </MudTd>
            </RowEditingTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Team Designations" ExpandedChanged="OnTeamOpened">
        <MudTable Items="TeamDesignations"
        Loading="@IsTeamLoading"
        Dense="true"
        Filter="FilterTeam"
        Hover="true"
        EditTrigger="TableEditTrigger.RowClick"
        ApplyButtonPosition="TableApplyButtonPosition.End"
        CanCancelEdit="true"
        OnPreviewEditClick="() => IsTeamEditing = true"
        RowEditCancel="CancelTeamChanges"
        OnCommitEditClick="CommitChanges"
        @ref="TeamTable">
            <ColGroup>
                <col />
                <col />
                <col />
                <col />
                <col style="width: 50px;" />
            </ColGroup>
            <ToolBarContent>
                <MudTextField @bind-Value="TeamSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddTeam" Disabled="IsTeamEditing">Add</MudIconButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Service Area</MudTh>
                <MudTh>Sales Designation</MudTh>
                <MudTh>Effective Start Date</MudTh>
                <MudTh>Effective End Date</MudTh>
                <MudTh />
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Team</MudTd>
                <MudTd>@context.SalesDesignation</MudTd>
                <MudTd>@context.EffectiveStartDate?.ToString("MM/dd/yyyy")</MudTd>
                <MudTd>@context.EffectiveEndDate?.ToString("MM/dd/yyyy")</MudTd>
                <MudTd Style="text-align:center">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => DeleteTeam(context)" />
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd>
                    <MudTextField @bind-Value="context.Team" Required />
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="context.SalesDesignation" Required />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="context.EffectiveStartDate" Required />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="context.EffectiveEndDate" Required />
                </MudTd>
            </RowEditingTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Therapy Type Designations" ExpandedChanged="OnTherapyTypeOpened">
        <MudTable Items="TherapyTypeDesignations"
        Loading="@IsTherapyTypeLoading"
        Dense="true"
        Filter="FilterTherapyType"
        Hover="true"
        EditTrigger="TableEditTrigger.RowClick"
        ApplyButtonPosition="TableApplyButtonPosition.End"
        CanCancelEdit="true"
        OnPreviewEditClick="() => IsTherapyTypeEditing = true"
        RowEditCancel="CancelTherapyTypeChanges"
        OnCommitEditClick="CommitChanges"
        @ref="TherapyTypeTable">
            <ColGroup>
                <col />
                <col />
                <col />
                <col />
                <col style="width: 50px;" />
            </ColGroup>
            <ToolBarContent>
                <MudTextField @bind-Value="TherapyTypeSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddTherapyType" Disabled="IsTherapyTypeEditing">Add</MudIconButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Service Area</MudTh>
                <MudTh>Sales Designation</MudTh>
                <MudTh>Effective Start Date</MudTh>
                <MudTh>Effective End Date</MudTh>
                <MudTh />
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.TherapyType</MudTd>
                <MudTd>@context.SalesDesignation</MudTd>
                <MudTd>@context.EffectiveStartDate?.ToString("MM/dd/yyyy")</MudTd>
                <MudTd>@context.EffectiveEndDate?.ToString("MM/dd/yyyy")</MudTd>
                <MudTd Style="text-align:center">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => DeleteTherapyType(context)" />
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd>
                    <MudTextField @bind-Value="context.TherapyType" Required />
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="context.SalesDesignation" Required />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="context.EffectiveStartDate" Required />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="context.EffectiveEndDate" Required />
                </MudTd>
            </RowEditingTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Sales Persons" ExpandedChanged="OnSalesPersonOpened">
        <MudTable 
        Items="SalesPersons"
        Loading="@IsSalesPersonLoading"
        CanCancelEdit
        OnPreviewEditClick="() => IsSalesPersonEditing = true"
        OnCommitEditClick="CommitChanges"
        RowEditCancel="CancelSalesPersonChanges"
        Hover="true"
        @ref="SalesPersonTable">
            <ColGroup>
                <col />
                <col style="width: 50%;" />
                <col />
                <col />
            </ColGroup>
            <HeaderContent>
                <MudTh>Sales Person Name</MudTh>
                <MudTh>Configuration</MudTh>
                <MudTh>Effective Start Date</MudTh>
                <MudTh>
                    <MudStack Row>
                        Effective End Date
                        <MudSpacer/>
                        <MudIconButton Icon="@Icons.Material.Rounded.Add" OnClick="AddSalesPerson" />
                    </MudStack>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudStack Row Spacing="1">
                        <MudAvatar Size="Size.Small">@context.SalesPersonName.FirstOrDefault()</MudAvatar>
                        <MudText Typo="Typo.body2">@context.SalesPersonName</MudText>
                    </MudStack>
                </MudTd>
                <MudTd>
                    <MudGrid Spacing="1">
                        @foreach(var designation in context.SalesDesignations.Where(x => x.EffectiveEndDate?.Date == DateTime.MaxValue.Date)) 
                        {
                            <MudItem xs="12">
                                <MudPaper Elevation="2">
                                    <MudStack Row Spacing="0">
                                        <MudChip T="string" Color="Color.Primary">@designation.SalesDesignationName</MudChip>
                                        <MudDivider Vertical FlexItem />
                                        <MudStack Row Spacing="0" Wrap="Wrap.Wrap">
                                            @foreach(var state in designation.SalesPersonStates.Where(x => x.EffectiveEndDate > DateTime.Now)) 
                                            {
                                                <MudChip T="string" Size="Size.Small">@state.State</MudChip>
                                            }
                                        </MudStack>
                                    </MudStack>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                </MudTd>
                <MudTd>@context.EffectiveStartDate?.ToString("MM/dd/yyyy")</MudTd>
                <MudTd>
                    <MudStack Row>
                        @context.EffectiveEndDate?.ToString("MM/dd/yyyy")
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => EditSalesPerson(context)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteSalesPerson(context)"/>
                    </MudStack>
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd colspan="2">
                    <MudTextField @bind-Value="context.SalesPersonName" Required />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="context.EffectiveStartDate" Required />
                </MudTd>
                <MudTd>
                    <MudStack Row>
                        <MudDatePicker @bind-Date="context.EffectiveEndDate" Required />
                        <MudIconButton Icon="@Icons.Material.Rounded.Loop" OnClick="() => SwitchDates(context)" />
                    </MudStack>
                </MudTd>
            </RowEditingTemplate>
        </MudTable>
    </MudExpansionPanel>
</MudExpansionPanels>
@code {
    [Inject]
    public required IDbContextFactory<CaretendContext> ContextFactory { get; set; }

    [Inject]
    public required IDialogService Dialog { get; set; }

    public required CaretendContext Context { get; set; }

    private Lock _lock = new Lock();

    protected override void OnInitialized()
    {
        Context = ContextFactory.CreateDbContext();
        base.OnInitialized();
    }

    public void Dispose() => Context.Dispose();

    #region Service Area Designations
    public required MudTable<ServiceAreaDesignation> ServiceAreaTable { get; set; }
    private List<ServiceAreaDesignation> ServiceAreaDesignations { get; set; } = [];
    private string ServiceAreaSearchString { get; set; } = "";
    private bool IsServiceAreaDesignationsLoading { get; set; } = true;
    public bool IsServiceAreaEditing = false;

    private async Task OnServiceAreaOpened(bool expanded) 
    {
        if (!IsServiceAreaDesignationsLoading || !expanded)
        {
            return;
        }

        await Task.Run(() => 
        {
            lock (_lock)
            {
                ServiceAreaDesignations = Context.ServiceAreaDesignations.ToList();
                IsServiceAreaDesignationsLoading = false;
            }
        });
    }

    private bool FilterServiceArea(ServiceAreaDesignation listItem) => Regex.IsMatch(listItem.ServiceArea, ServiceAreaSearchString);

    private async Task AddServiceArea()
    {
        IsServiceAreaEditing = true;

        var newItem = new ServiceAreaDesignation()
        {
            EffectiveStartDate = new DateTime(1, 1, 1),
            EffectiveEndDate = DateTime.Now
        };

        Context.ServiceAreaDesignations.Add(newItem);
        ServiceAreaDesignations.Insert(0, newItem);
        await Task.Delay(50);
        ServiceAreaTable.SetSelectedItem(newItem);
        ServiceAreaTable.SetEditingItem(newItem);
        StateHasChanged();
    }

    private void CancelServiceAreaChanges(object? input) 
    {
        Context.RevertChanges();

        IsServiceAreaEditing = false;

        var serviceArea = (ServiceAreaDesignation?)input;
        if (serviceArea != null && serviceArea.Id == 0) 
        {
            ServiceAreaDesignations.Remove(serviceArea);
        }

        StateHasChanged();
    }

    private async Task DeleteServiceArea(ServiceAreaDesignation serviceArea)
    {
        var result = await Dialog.ShowMessageBox("Warning", "Are you sure you want to delete this entry?", yesText: "Proceed", cancelText: "Cancel") ?? false;

        if (!result) 
        {
            return;
        }

        Context.ServiceAreaDesignations.Remove(serviceArea);
        ServiceAreaDesignations.Remove(serviceArea);
        Context.SaveChanges();
        StateHasChanged();
    }
    #endregion

    #region Team Sales Designation
    public required MudTable<TeamDesignation> TeamTable { get; set; }
    private List<TeamDesignation> TeamDesignations { get; set; } = [];
    private string TeamSearchString { get; set; } = "";
    private bool IsTeamLoading { get; set; } = true;
    public bool IsTeamEditing = false;

    private async Task OnTeamOpened(bool expanded)
    {
        if (!IsTeamLoading || !expanded)
        {
            return;
        }

        await Task.Run(() =>
        {
            lock (_lock)
            {
                TeamDesignations = Context.TeamDesignations.ToList();
                IsTeamLoading = false;
            }
        });
    }

    private bool FilterTeam(TeamDesignation listItem) => Regex.IsMatch(listItem.Team, TeamSearchString);

    private async Task AddTeam()
    {
        IsTeamEditing = true;

        var newItem = new TeamDesignation()
        {
            EffectiveStartDate = new DateTime(1, 1, 1),
            EffectiveEndDate = DateTime.Now
        };

        Context.TeamDesignations.Add(newItem);
        TeamDesignations.Insert(0, newItem);
        await Task.Delay(50);
        TeamTable.SetSelectedItem(newItem);
        TeamTable.SetEditingItem(newItem);
        StateHasChanged();
    }

    private void CancelTeamChanges(object? input)
    {
        Context.RevertChanges();

        IsTeamEditing = false;

        var team = (TeamDesignation?)input;
        if (team != null && team.Id == 0)
        {
            TeamDesignations.Remove(team);
        }

        StateHasChanged();
    }

    private async Task DeleteTeam(TeamDesignation team)
    {
        var result = await Dialog.ShowMessageBox("Warning", "Are you sure you want to delete this entry?", yesText: "Proceed", cancelText: "Cancel") ?? false;

        if (!result)
        {
            return;
        }

        Context.TeamDesignations.Remove(team);
        TeamDesignations.Remove(team);
        Context.SaveChanges();
        StateHasChanged();
    }
    #endregion

    #region TherapyType Designation
    public required MudTable<TherapyTypeDesignation> TherapyTypeTable { get; set; }
    private List<TherapyTypeDesignation> TherapyTypeDesignations { get; set; } = [];
    private string TherapyTypeSearchString { get; set; } = "";
    private bool IsTherapyTypeLoading { get; set; } = true;
    public bool IsTherapyTypeEditing = false;

    private async Task OnTherapyTypeOpened(bool expanded)
    {
        if (!IsTherapyTypeLoading || !expanded)
        {
            return;
        }

        await Task.Run(() =>
        {
            lock (_lock)
            {
                TherapyTypeDesignations = Context.TherapyTypeDesignations.ToList();
                IsTherapyTypeLoading = false;
            }
        });
    }

    private bool FilterTherapyType(TherapyTypeDesignation listItem) => Regex.IsMatch(listItem.TherapyType, TherapyTypeSearchString);

    private async Task AddTherapyType()
    {
        IsTherapyTypeEditing = true;

        var newItem = new TherapyTypeDesignation()
            {
                EffectiveStartDate = new DateTime(1, 1, 1),
                EffectiveEndDate = DateTime.Now
            };

        Context.TherapyTypeDesignations.Add(newItem);
        TherapyTypeDesignations.Insert(0, newItem);
        await Task.Delay(50);
        TherapyTypeTable.SetSelectedItem(newItem);
        TherapyTypeTable.SetEditingItem(newItem);
        StateHasChanged();
    }

    private void CancelTherapyTypeChanges(object? input)
    {
        Context.RevertChanges();

        IsTherapyTypeEditing = false;

        var team = (TherapyTypeDesignation?)input;
        if (team != null && team.Id == 0)
        {
            TherapyTypeDesignations.Remove(team);
        }

        StateHasChanged();
    }

    private async Task DeleteTherapyType(TherapyTypeDesignation team)
    {
        var result = await Dialog.ShowMessageBox("Warning", "Are you sure you want to delete this entry?", yesText: "Proceed", cancelText: "Cancel") ?? false;

        if (!result)
        {
            return;
        }

        Context.TherapyTypeDesignations.Remove(team);
        TherapyTypeDesignations.Remove(team);
        Context.SaveChanges();
        StateHasChanged();
    }
    #endregion

    #region Sales Persons
    public required MudTable<SalesPerson> SalesPersonTable { get; set; }
    private List<SalesPerson> SalesPersons { get; set; } = [];
    private bool IsSalesPersonLoading { get; set; } = true;
    public bool IsSalesPersonEditing = false;

    private async Task OnSalesPersonOpened(bool expanded)
    {
        if (!IsSalesPersonLoading || !expanded)
        {
            return;
        }

        await Task.Run(() =>
        {
            lock (_lock)
            {
                SalesPersons = Context.SalesPersons
                    .Include(x => x.SalesDesignations)
                    .ThenInclude(x => x.SalesPersonStates)
                    .AsSingleQuery()
                    .ToList();

                IsSalesPersonLoading = false;
            }
        });
    }

    private async Task EditSalesPerson(SalesPerson salesPerson)
    {
        var parameters = new DialogParameters();
        parameters.Add("SalesPerson", salesPerson);
        parameters.Add("Context", Context);

        var options = new DialogOptions() 
        { 
            FullWidth = true,
            CloseButton = true,
            FullScreen = true
        };

        var dialog = await Dialog.ShowAsync<SalesPersonEditModal>(salesPerson.SalesPersonName, parameters, options);
        var result = await dialog.Result;
    }

    private void CancelSalesPersonChanges(object? input)
    {
        Context.RevertChanges();

        IsSalesPersonEditing = false;

        var salesPerson = (SalesPerson?)input;
        if (salesPerson != null && salesPerson.Id == 0)
        {
            SalesPersons.Remove(salesPerson);
        }

        StateHasChanged();
    }

    private void SwitchDates(SalesPerson salesPerson)
    {
        if (salesPerson.EffectiveEndDate?.Date != DateTime.MaxValue.Date)
        {
            salesPerson.EffectiveEndDate = DateTime.MaxValue;
        }
        else
        {
            salesPerson.EffectiveEndDate = DateTime.Now;
        }

        StateHasChanged();
    }

    private async Task AddSalesPerson()
    {
        var salesPerson = new SalesPerson
        {
            EffectiveStartDate = DateTime.Now,
            EffectiveEndDate = DateTime.MaxValue.Date
        };

        Context.SalesPersons.Add(salesPerson);
        SalesPersons.Insert(0, salesPerson);
        await Task.Delay(50);
        SalesPersonTable.SetSelectedItem(salesPerson);
        SalesPersonTable.SetEditingItem(salesPerson);

        StateHasChanged();
    }

    private async Task DeleteSalesPerson(SalesPerson salesPerson)
    {
        var result = await Dialog.ShowMessageBox("Warning", "Are you sure you want to delete this entry?", yesText: "Proceed", cancelText: "Cancel") ?? false;

        if (!result)
        {
            return;
        }

        Context.SalesPersons.Remove(salesPerson);
        SalesPersons.Remove(salesPerson);
        Context.SaveChanges();
        StateHasChanged();
    }

    #endregion

    private void CommitChanges() 
    {
        IsServiceAreaEditing = false;
        IsTeamEditing = false;
        IsTherapyTypeEditing = false;
        IsSalesPersonEditing = false;
        Context.SaveChanges();
    }
}
