@page "/pharma-api-dashboard"

@using Microsoft.Extensions.Options

<div class="mx-2 my-1">
    <MudExpansionPanels>
        <MudExpansionPanel HideIcon ExpandedChanged="(x) => PharmaAPIExpanded = x">
            <TitleContent>
                <MudStack Row>
                    <MudText>Pharma API</MudText>
                    <MudIcon Icon="@PharmaIcon" Color="@PharmaIconColor" Title="@PharmaIconTitle" />
                </MudStack>
            </TitleContent>
            <ChildContent>
                <MudButton Variant="Variant.Filled" Color="@MaintenanceButtonColor" OnClick="MaintenanceModeClick">Toggle Maintenance Mode</MudButton>
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel ExpandedChanged="(x) => JobPanelExpanded = x">
            <TitleContent>
                <MudStack Row>
                    <MudText>Pharma API Background Jobs</MudText>
                    <MudIcon Icon="@JobIcon" Color="@JobIconColor" Title="@JobIconTitle" />
                </MudStack>
            </TitleContent>
            <ChildContent>
                <MudStack>
                    @foreach (var job in BGHeartbeat?.JobInfo ?? [])
                    {
                        <MudPaper Class="pa-3" Elevation="4">
                            <MudGrid>
                                <MudItem xs="3">
                                    <MudText Typo="Typo.subtitle2">@job.Name</MudText>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudStack Row Justify="Justify.FlexEnd">
                                        <MudText Typo="Typo.subtitle2">@($"Next Run: {job.NextRunDate}")</MudText>
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                            <MudProgressLinear Min="0" Max="100" Value="@job.Progress" Color="@(job.Enabled ? Color.Success : Color.Error)" Rounded />
                        </MudPaper>
                    }
                </MudStack>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>

@code {
    [Inject]
    public required IHttpClientFactory HttpClientFactory { get; set; }

    [Inject]
    public required IOptionsSnapshot<AppSettings> AppSettingsSnapshot { get; set; }

    [Inject]
    public required ISnackbar SnackBar { get; set; }

    [Inject]
    public required CaretendContext Context { get; set; }

    public AppSettings AppSettings => AppSettingsSnapshot.Value;

    public required HttpClient BackgroundJobsClient { get; set; }
    public required HttpClient PharmaAPIClient { get; set; }

    private BackgroundJobHeartbeat? BGHeartbeat { get; set; }
    private PharmaAPIHeartbeat? PHeartbeat { get; set; }

    private Task? BGRefreshTask;
    private Task? PRefreshTask;

    private bool JobPanelExpanded = false;
    private bool PharmaAPIExpanded = false;

    private string JobIcon => BGHeartbeat?.Status == "Online" ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.ErrorOutline;
    private Color JobIconColor => BGHeartbeat?.Status == "Online" ? Color.Success : Color.Error;
    private string JobIconTitle => BGHeartbeat?.Status == "Online" ? "Service Online" : "Service Offline";

    private string PharmaIcon => PHeartbeat == null ? Icons.Material.Filled.ErrorOutline : PHeartbeat.Payload.IsLocked ? Icons.Material.Filled.Lock : Icons.Material.Filled.CheckCircle;
    private Color PharmaIconColor => PHeartbeat == null ? Color.Error : PHeartbeat.Payload.IsLocked ? Color.Warning : Color.Success;
    private string PharmaIconTitle => PHeartbeat == null ? "Service Offline" : PHeartbeat.Payload.IsLocked ? "Maintenance Mode" : "Service Online";

    private Color MaintenanceButtonColor => PHeartbeat == null ? Color.Surface : PHeartbeat.Payload.IsLocked ? Color.Success : Color.Secondary;

    private CancellationTokenSource Cts = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        BackgroundJobsClient = HttpClientFactory.CreateClient();
        BackgroundJobsClient.BaseAddress = new Uri(AppSettings.BackgroundJobs);

        PharmaAPIClient = HttpClientFactory.CreateClient();
        PharmaAPIClient.BaseAddress = new Uri(AppSettings.PharmaAPI);

        try
        {
            BGHeartbeat = await BackgroundJobsClient.GetFromJsonAsync<BackgroundJobHeartbeat>("api/heartbeat", Cts.Token);
        } 
        catch (Exception) 
        {
            SnackBar.Add("Background job service did not respond", Severity.Warning);
        }

        try 
        {
            PHeartbeat = await PharmaAPIClient.GetFromJsonAsync<PharmaAPIHeartbeat>("api/heartbeat", Cts.Token);
        }
        catch (Exception)
        {
            SnackBar.Add("Pharma API did not respond", Severity.Warning);
        }

        BGRefreshTask = Task.Run(async () =>
        {
            while (!Cts.IsCancellationRequested)
            {
                try
                {
                    await Task.Delay(1000);
                    if (!JobPanelExpanded)
                    {
                        continue;
                    }

                    if (BGHeartbeat == null || BGHeartbeat.JobInfo.Where(x => x.Progress >= 100).Any())
                    {
                        try 
                        {
                            BGHeartbeat = await BackgroundJobsClient.GetFromJsonAsync<BackgroundJobHeartbeat>("api/heartbeat", Cts.Token);
                        } 
                        catch 
                        {
                            if (BGHeartbeat != null) { BGHeartbeat.Status = "Offline"; }
                        }
                    }
                    await InvokeAsync(StateHasChanged);
                }
                catch { }
            }
        });

        PRefreshTask = Task.Run(async () => 
        { 
            while (!Cts.IsCancellationRequested)
            {
                try
                {
                    await Task.Delay(10000);
                    if (!PharmaAPIExpanded)
                    {
                        continue;
                    }

                    PHeartbeat = await PharmaAPIClient.GetFromJsonAsync<PharmaAPIHeartbeat>("api/heartbeat", Cts.Token);
                    await InvokeAsync(StateHasChanged);
                }
                catch { }
            }
        });

        await base.OnInitializedAsync();
    }

    private async Task MaintenanceModeClick() 
    {
        if (PHeartbeat == null)
        {
            return;
        }

        await Context.Database.ExecuteSqlAsync($"INSERT INTO PharmaAPI.ToggleAPI VALUES ({!PHeartbeat.Payload.IsLocked}, GETDATE())");
        PHeartbeat.Payload.IsLocked = !PHeartbeat.Payload.IsLocked;
        StateHasChanged();
    }

    public void Dispose() 
    {
        Cts.Cancel();
        BackgroundJobsClient.Dispose();
        PharmaAPIClient.Dispose();
    }

    private class BackgroundJobHeartbeat 
    {
        public required string Status { get; set; }
        public List<BackgroundJob> JobInfo { get; set; } = [];

        public class BackgroundJob
        {
            public required string Name { get; set; }
            public required bool Enabled { get; set; }
            public required double Interval { get; set; }
            public DateTime? LastExecutionDate { get; set; }
            public DateTime? NextRunDate => LastExecutionDate?.AddMilliseconds(Interval);
            public double Progress => 
                LastExecutionDate.HasValue && NextRunDate.HasValue ? 
                ((DateTime.Now - LastExecutionDate).Value.TotalSeconds / ((NextRunDate - LastExecutionDate).Value.TotalSeconds)) * 100 : 
                0f;
        }
    }

    private class PharmaAPIHeartbeat 
    {
        public required int StatusCode { get; set; }
        public required string TraceId { get; set; }
        public required PharmaAPIPayload Payload { get; set; }

        public class PharmaAPIPayload 
        {
            public bool IsLocked { get; set; }
        }
    }
}
